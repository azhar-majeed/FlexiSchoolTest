// <auto-generated />
using System;
using Flexischools.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flexischools.Infrastructure.Migrations
{
    [DbContext(typeof(FlexischoolsDbContext))]
    [Migration("20251018174038_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flexischools.Domain.Entities.Canteen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OpeningDays")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderCutOffTime")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Canteens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary School Canteen",
                            OpeningDays = "Monday,Tuesday,Wednesday,Thursday,Friday",
                            OrderCutOffTime = "09:30"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High School Canteen",
                            OpeningDays = "Monday,Tuesday,Wednesday,Thursday,Friday",
                            OrderCutOffTime = "08:45"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sports Canteen",
                            OpeningDays = "Monday,Wednesday,Friday",
                            OrderCutOffTime = "10:00"
                        });
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllergenTags")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CanteenId")
                        .HasColumnType("int");

                    b.Property<int?>("DailyStockCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CanteenId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergenTags = "gluten,dairy",
                            CanteenId = 1,
                            DailyStockCount = 20,
                            Description = "Fresh chicken breast with lettuce and mayo",
                            Name = "Chicken Sandwich",
                            Price = 6.50m
                        },
                        new
                        {
                            Id = 2,
                            AllergenTags = "gluten",
                            CanteenId = 1,
                            DailyStockCount = 15,
                            Description = "Mixed vegetables in a tortilla wrap",
                            Name = "Veggie Wrap",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 3,
                            CanteenId = 1,
                            DailyStockCount = 25,
                            Description = "Seasonal fresh fruits",
                            Name = "Fruit Salad",
                            Price = 4.00m
                        },
                        new
                        {
                            Id = 4,
                            AllergenTags = "gluten,dairy",
                            CanteenId = 2,
                            DailyStockCount = 30,
                            Description = "Margherita pizza slice",
                            Name = "Pizza Slice",
                            Price = 4.50m
                        },
                        new
                        {
                            Id = 5,
                            AllergenTags = "dairy,eggs",
                            CanteenId = 2,
                            DailyStockCount = 12,
                            Description = "Romaine lettuce with caesar dressing",
                            Name = "Caesar Salad",
                            Price = 7.00m
                        },
                        new
                        {
                            Id = 6,
                            AllergenTags = "nuts",
                            CanteenId = 3,
                            DailyStockCount = 40,
                            Description = "Granola and nuts energy bar",
                            Name = "Energy Bar",
                            Price = 3.50m
                        },
                        new
                        {
                            Id = 7,
                            AllergenTags = "dairy",
                            CanteenId = 3,
                            DailyStockCount = 20,
                            Description = "Mixed berry smoothie",
                            Name = "Smoothie",
                            Price = 5.50m
                        });
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CanteenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("FulfilmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CanteenId");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique()
                        .HasFilter("[IdempotencyKey] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("WalletBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.smith@email.com",
                            Name = "John Smith",
                            WalletBalance = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Email = "sarah.jones@email.com",
                            Name = "Sarah Jones",
                            WalletBalance = 25.50m
                        },
                        new
                        {
                            Id = 3,
                            Email = "mike.wilson@email.com",
                            Name = "Mike Wilson",
                            WalletBalance = 100.00m
                        });
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergens")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergens = "nuts",
                            Name = "Emma Smith",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Liam Smith",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Allergens = "dairy,eggs",
                            Name = "Sophie Jones",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 4,
                            Allergens = "gluten",
                            Name = "Oliver Wilson",
                            ParentId = 3
                        });
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.MenuItem", b =>
                {
                    b.HasOne("Flexischools.Domain.Entities.Canteen", "Canteen")
                        .WithMany("MenuItems")
                        .HasForeignKey("CanteenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canteen");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Order", b =>
                {
                    b.HasOne("Flexischools.Domain.Entities.Canteen", "Canteen")
                        .WithMany("Orders")
                        .HasForeignKey("CanteenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flexischools.Domain.Entities.Parent", "Parent")
                        .WithMany("Orders")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flexischools.Domain.Entities.Student", "Student")
                        .WithMany("Orders")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Canteen");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Flexischools.Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flexischools.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Student", b =>
                {
                    b.HasOne("Flexischools.Domain.Entities.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Canteen", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Parent", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Flexischools.Domain.Entities.Student", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
